use anchor_lang::prelude::*;
use solana_program::{program::invoke, instruction::Instruction};

declare_id!("ArbiCpi11111111111111111111111111111111111");

#[program]
pub mod action_processor {
    use super::*;

    pub fn execute_action(ctx: Context<ExecuteAction>, data: Vec<u8>) -> Result<()> {
        let ix = Instruction {
            program_id: *ctx.accounts.target_program.key,
            accounts: vec![
                AccountMeta::new(*ctx.accounts.user.key, true),
                AccountMeta::new(*ctx.accounts.account1.key, false),
                AccountMeta::new(*ctx.accounts.account2.key, false),
            ],
            data,
        };
        invoke(&ix, &[
            ctx.accounts.user.to_account_info(),
            ctx.accounts.account1.to_account_info(),
            ctx.accounts.account2.to_account_info(),
            ctx.accounts.target_program.to_account_info(),
        ])?;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct ExecuteAction<'info> {
    pub user: Signer<'info>,
    #[account(mut)]
    pub account1: AccountInfo<'info>,
    #[account(mut)]
    pub account2: AccountInfo<'info>,
    pub target_program: AccountInfo<'info>,
}
