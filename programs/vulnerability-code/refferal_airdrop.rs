use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer};

declare_id!("RefAirdrop111111111111111111111111111111111");

#[program]
pub mod referral_airdrop {
    use super::*;

    pub fn claim_with_referral(ctx: Context<ClaimWithReferral>, amount: u64) -> Result<()> {
        let referral_reward = amount / 10;

        token::transfer(
            ctx.accounts.airdrop_context(),
            amount,
        )?;

        token::transfer(
            ctx.accounts.referral_reward_context(),
            referral_reward,
        )
    }
}

#[derive(Accounts)]
pub struct ClaimWithReferral<'info> {
    #[account(mut)]
    pub airdrop_pool: Account<'info, TokenAccount>, // 固定送信元(PDA)

    #[account(mut)]
    pub claimer_account: Account<'info, TokenAccount>, // エアドロップ申請者

    #[account(mut)]
    pub referrer_account: Account<'info, TokenAccount>, // 紹介者 (任意指定可能)

    pub authority: Signer<'info>,
    pub token_program: Program<'info, Token>,
}

impl<'info> ClaimWithReferral<'info> {
    fn airdrop_context(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        CpiContext::new(
            self.token_program.to_account_info(),
            Transfer {
                from: self.airdrop_pool.to_account_info(),
                to: self.claimer_account.to_account_info(),
                authority: self.authority.to_account_info(),
            },
        )
    }

    fn referral_reward_context(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        CpiContext::new(
            self.token_program.to_account_info(),
            Transfer {
                from: self.airdrop_pool.to_account_info(),
                to: self.referrer_account.to_account_info(),
                authority: self.authority.to_account_info(),
            },
        )
    }
}
