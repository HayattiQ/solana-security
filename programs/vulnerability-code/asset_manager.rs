use anchor_lang::prelude::*;
use anchor_spl::token::{self, TokenAccount, Token, Transfer};

declare_id!("9XQjT2R1w5bW2pC7RQ6yUecK7uN8mtUp8QvL3ps7bfkj");

#[program]
pub mod asset_manager {
    use super::*;

    pub fn process(ctx: Context<Process>, amount: u64) -> Result<()> {
        let cpi_accounts = Transfer {
            from: ctx.accounts.source.to_account_info(),
            to: ctx.accounts.destination.to_account_info(),
            authority: ctx.accounts.authority.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        token::transfer(CpiContext::new(cpi_program, cpi_accounts), amount)?;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Process<'info> {
    #[account(mut, constraint = source.authority == authority.key(), constraint = source.mint == destination.mint)]
    pub source: Account<'info, TokenAccount>,
    #[account(mut, constraint = destination.mint == source.mint)]
    pub destination: Account<'info, TokenAccount>,
    pub authority: Signer<'info>,
    pub token_program: AccountInfo<'info>,
}
