use anchor_lang::prelude::*;

declare_id!("Stake11111111111111111111111111111111111111");

#[program]
pub mod staking_example {
    use super::*;

    pub fn stake(ctx: Context<Stake>, amount: u64) -> Result<()> {
        let user_stake = &mut ctx.accounts.user_stake;
        user_stake.amount += amount;
        Ok(())
    }

    pub fn unstake(ctx: Context<Unstake>, amount: u64) -> Result<()> {
        let user_stake = &mut ctx.accounts.user_stake;
        require!(user_stake.amount >= amount, ErrorCode::InsufficientStake);
        user_stake.amount -= amount;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Stake<'info> {
    #[account(mut, constraint = user_stake.authority == user.key())]
    pub user_stake: Account<'info, UserStake>,
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Unstake<'info> {
    #[account(mut)]
    pub user_stake: Account<'info, UserStake>,
    pub user: Signer<'info>,
}

#[account]
pub struct UserStake {
    pub authority: Pubkey,
    pub amount: u64,
}

#[error_code]
pub enum ErrorCode {
    InsufficientStake,
    Unauthorized,
}
